
Steps for creating CRUD functionality using Firebase Firestore and React (with Tailwind CSS):

1. **Setup Firebase Firestore**:
    - Import Firebase configuration from the utility file `FirebaseAppConfig.js`.
    - Get Firestore instance using `getFirestore()` method.

2. **Initial Setup in React**:
    - Define a state `employee` using `useState()` to handle form data (with fields: name, salary, and joining date).
    - Define additional states like `employeeData` (to hold employee records), `isEmpty` (to check if no data exists), `isUpdated` (to trigger component updates), and `edit` (to track whether an employee is being edited).

3. **Fetching Employee Data**:
    - Use `useEffect()` to fetch employee data from the Firestore collection “employees”.
    - Use `getDocs()` method to retrieve documents and check if the collection is empty.
    - If there are employees, store the data in the `employeeData` state and handle each document's `uid` as a unique identifier.

4. **Form Handling**:
    - Use the `handleChange()` function to capture form input changes for name, salary, and joining date.
    - The `createEmployee()` function is used to add a new employee document to Firestore using `addDoc()` and reset the form afterward.
    - Use the `saveEmployee()` function to update employee records with `updateDoc()` for existing employees.

5. **Editing and Deleting Employees**:
    - To edit an employee, set the `employee` data in the form fields by triggering the `editEmployee()` function.
    - To delete an employee, call the `deleteEmployee()` function, which uses the `deleteDoc()` method to remove the record from Firestore.

6. **Conditional Rendering**:
    - Check if the collection is empty and display an alert using Tailwind CSS if no employee data is available.
    - If data exists, display it in a table with options to edit or delete records.

7. **Form and Table Design**:
    - Use Tailwind CSS to design the form (with inputs for name, salary, and joining date) and the table to display employee data.
    - Add buttons to handle employee editing and deletion, with appropriate styling for actions.

8. **Alerts and Feedback**:
    - Use simple JavaScript alert to notify users when data is stored successfully.
    - Use conditional JSX to display a message indicating whether there is data or not.

Steps involved in:
- Firebase Firestore Setup
- State Management in React
- CRUD Operations (Create, Read, Update, Delete)
- Tailwind CSS styling for form and table components
